#!/usr/bin/env python
import argparse
import re
import time
import os
import json
import oauth2
import urllib
import urllib2

import pandas as pd

from collections import defaultdict

wd = os.getcwd()
if not os.path.exists('{}/output'.format(wd)):
    os.makedirs('{}/output'.format(wd))

URL = 'https://api.yelp.com/v2'

KEY = os.getenv('YELP_KEY')
KEY_SECRET = os.getenv('YELP_KEY_SECRET')
TOKEN = os.getenv('YELP_TOKEN')
TOKEN_SECRET = os.getenv('YELP_TOKEN_SECRET')

START = 0
DATE = time.strftime('%d%b%Y').lower()

def _get_oauth(url):
    app = oauth2.Consumer(KEY, KEY_SECRET)
    
    oa_req = oauth2.Request(method='GET', url=url)
    oa_req.update({'oauth_nonce': oauth2.generate_nonce(), 
                   'oauth_timestamp': oauth2.generate_timestamp(), 
                   'oauth_token': TOKEN, 'oauth_consumer_key': KEY})
    
    oa_token = oauth2.Token(TOKEN, TOKEN_SECRET)
    
    oa_req.sign_request(oauth2.SignatureMethod_HMAC_SHA1(), 
                        app, oa_token)
    signed_url = oa_req.to_url()
    
    response = json.loads(urllib2.urlopen(signed_url, None).read())

    return response


def api_request(url, search_type, term, location, limit=20, offset=0):
    url = '{}/{}?term={}&location={}&limit={}&offset={}'.format(url, 
        search_type, term, location, limit, offset)
        
    return _get_oauth(url)


def make_business_directory(search_type, term, location, nbr_results):
    restaurants = defaultdict(list)
    for i in range(START, nbr_results, 20):
        print 'Getting records {} through {}...'.format(i + 1, i + 20)
        d = api_request(URL, search_type, term, location, 20, i)

        for biz in d['businesses']:
            restaurants['name'].append(biz.get('name', ''))
            restaurants['rating'].append(biz.get('rating', ''))
            restaurants['phone'].append(biz.get('display_phone', ''))
            restaurants['address'].append(biz['location'].get('address', ''))
            restaurants['city'].append(biz['location'].get('city', ''))
            restaurants['state'].append(biz['location'].get('state_code', ''))
            restaurants['zip'].append(biz['location'].get('postal_code', ''))
            restaurants['lat'].append(biz['location']['coordinate'].get('latitude', 
                                      ''))
            restaurants['lon'].append(biz['location']['coordinate'].get('longitude', 
                                      ''))
            restaurants['reviews'].append(biz.get('review_count', ''))
            restaurants['yelp_url'].append(biz.get('url', ''))

    restaurants = pd.DataFrame(restaurants)
    restaurants.phone = restaurants.phone.apply(lambda x: re.sub('\+', '\'', x))

    restaurants.to_csv('{}/output/{}_{}_{}.csv'.format(wd, term.lower(), 
                       location.lower(), DATE), index=False, encoding='utf-8')


def run(search_type, term, location, nbr_results):
    make_business_directory(search_type, term, location, nbr_results)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Create directory of Yelp businesses')
    parser.add_argument('--search_type', choices=['search', 'business'], 
                        help='Search type: search or business')
    parser.add_argument('--term', required=True, 
                        help='What you are searching Yelp for')
    parser.add_argument('--location', required=True, 
                        help='Location you would like to search on Yelp')
    parser.add_argument('--nbr_results', default=100, type=int, required=False, 
                        help='Number of results desired')
    
    args = parser.parse_args()

    run(args.search_type, args.term, args.location, args.nbr_results)
